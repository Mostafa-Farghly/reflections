* What happens when you initialize a repository? Why do you need to do it?
- What happens is my directory is recognized by Git as a repository and a
  (.git) directory is created. We need to do it so we can make commits to
  keep track of our changes.

* How is the staging area different from the working directory and the
  repository?
  What value do you think it offers?
- The staging area contain only the files chosen to be committed while the
  working directory contains all the files.
  It allows me to control which files to be committed.


* How can you use the staging area to make sure you have one commit per logical
  change?
- By comparing it to the latest commit using (git diff --staged).

* What are some situations when branches would be helpful in keeping your history
  organized? How would branches help?
- They would be helpful when one wants to experiment something new or test a new
  feature.
  They help as they keep the original version untouched in the master branch
  and keep it easy to go back to it in any time and let you make your changes
  to the branch you have created.

* How do the diagrams help you visualize the branch structure?
- You can connect each commit in a branch by its parent, so you can know which
  commits are connected and whether a commit is unreachable.

* What is the result of merging two branches together? Why do we represent it in
  the diagram the way we do?
- A new commit that has both codes of the two branches.
  because the resulted commit can refer to both commits of the two branches.

* What are the pros and cons of Git's automatic merging vs. always doing merges
  manually?
- Pros: alerts the user if their is changes in the same area of both merged
  commits or if there is any ambiguity in merging and lets him decide what
  happens.
  Cons: Needs more work.
